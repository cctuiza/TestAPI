//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PaloUpAPI.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PALOUPEntities : DbContext
    {
        public PALOUPEntities()
            : base("name=PALOUPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<core_employee> core_employee { get; set; }
        public virtual DbSet<token> tokens { get; set; }
        public virtual DbSet<core_attachments> core_attachments { get; set; }
        public virtual DbSet<core_drivepath> core_drivepath { get; set; }
        public virtual DbSet<core_temp_attachment> core_temp_attachment { get; set; }
        public virtual DbSet<core_users> core_users { get; set; }
        public virtual DbSet<core_system> core_system { get; set; }
        public virtual DbSet<core_appsystem> core_appsystem { get; set; }
        public virtual DbSet<core_link> core_link { get; set; }
        public virtual DbSet<core_UserMenuList> core_UserMenuList { get; set; }
        public virtual DbSet<core_vAdminMenu> core_vAdminMenu { get; set; }
        public virtual DbSet<core_vParentMenu> core_vParentMenu { get; set; }
        public virtual DbSet<core_appmenu> core_appmenu { get; set; }
        public virtual DbSet<core_appmenuuser> core_appmenuuser { get; set; }
        public virtual DbSet<core_appsystemuser> core_appsystemuser { get; set; }
        public virtual DbSet<ole_examinee> ole_examinee { get; set; }
        public virtual DbSet<core_branchmst> core_branchmst { get; set; }
        public virtual DbSet<core_district> core_district { get; set; }
        public virtual DbSet<core_userswarehouse> core_userswarehouse { get; set; }
        public virtual DbSet<core_vEmployeeNotUser> core_vEmployeeNotUser { get; set; }
        public virtual DbSet<core_appsettings> core_appsettings { get; set; }
        public virtual DbSet<core_confirmation> core_confirmation { get; set; }
        public virtual DbSet<core_derictory> core_derictory { get; set; }
        public virtual DbSet<apps_file_map> apps_file_map { get; set; }
        public virtual DbSet<rms_useranalysisgroupaccess> rms_useranalysisgroupaccess { get; set; }
        public virtual DbSet<wms_userserverwarehouse> wms_userserverwarehouse { get; set; }
        public virtual DbSet<wms_serverwarehouses> wms_serverwarehouses { get; set; }
        public virtual DbSet<wms_servers> wms_servers { get; set; }
        public virtual DbSet<app_control_no> app_control_no { get; set; }
        public virtual DbSet<fpma_member> fpma_member { get; set; }
        public virtual DbSet<mifs_attendance> mifs_attendance { get; set; }
        public virtual DbSet<mifs_meeting> mifs_meeting { get; set; }
        public virtual DbSet<mifs_members> mifs_members { get; set; }
        public virtual DbSet<mifs_respondent> mifs_respondent { get; set; }
        public virtual DbSet<mifs_response> mifs_response { get; set; }
        public virtual DbSet<mifs_topicgroup> mifs_topicgroup { get; set; }
        public virtual DbSet<mifs_topicmembers> mifs_topicmembers { get; set; }
        public virtual DbSet<mifs_ladder> mifs_ladder { get; set; }
        public virtual DbSet<mifs_parking> mifs_parking { get; set; }
        public virtual DbSet<mifs_Analytics> mifs_Analytics { get; set; }
        public virtual DbSet<mifs_AnalyticsWithResponse> mifs_AnalyticsWithResponse { get; set; }
        public virtual DbSet<Mifs_DailyUtilization> Mifs_DailyUtilization { get; set; }
        public virtual DbSet<mifs_FollowUpOpen> mifs_FollowUpOpen { get; set; }
        public virtual DbSet<mifs_SumOfIssues> mifs_SumOfIssues { get; set; }
        public virtual DbSet<mifs_vAccountValidation> mifs_vAccountValidation { get; set; }
        public virtual DbSet<mifs_vClosedPerResponsible> mifs_vClosedPerResponsible { get; set; }
        public virtual DbSet<mifs_vFirmAttendance> mifs_vFirmAttendance { get; set; }
        public virtual DbSet<mifs_vIssueClosedPerEmployeeX> mifs_vIssueClosedPerEmployeeX { get; set; }
        public virtual DbSet<mifs_vIssueCount> mifs_vIssueCount { get; set; }
        public virtual DbSet<mifs_vIssueForAcknowledgement> mifs_vIssueForAcknowledgement { get; set; }
        public virtual DbSet<mifs_vIssuePerBranchPerTopic> mifs_vIssuePerBranchPerTopic { get; set; }
        public virtual DbSet<mifs_vIssuePerWeekPerStatus> mifs_vIssuePerWeekPerStatus { get; set; }
        public virtual DbSet<mifs_vIssueReport> mifs_vIssueReport { get; set; }
        public virtual DbSet<mifs_vIssues> mifs_vIssues { get; set; }
        public virtual DbSet<mifs_vIssueTrendMonthly> mifs_vIssueTrendMonthly { get; set; }
        public virtual DbSet<mifs_vMeeting> mifs_vMeeting { get; set; }
        public virtual DbSet<mifs_vMeetingSchedule> mifs_vMeetingSchedule { get; set; }
        public virtual DbSet<mifs_vNotMember> mifs_vNotMember { get; set; }
        public virtual DbSet<mifs_vOpenIssuePerWeek> mifs_vOpenIssuePerWeek { get; set; }
        public virtual DbSet<mifs_vParking> mifs_vParking { get; set; }
        public virtual DbSet<mifs_vResponse> mifs_vResponse { get; set; }
        public virtual DbSet<mifs_vTopicLevel> mifs_vTopicLevel { get; set; }
        public virtual DbSet<mifs_vTopicMembers> mifs_vTopicMembers { get; set; }
        public virtual DbSet<mifs_topic> mifs_topic { get; set; }
        public virtual DbSet<mifs_dropdown> mifs_dropdown { get; set; }
        public virtual DbSet<mifs_dropdowngroup> mifs_dropdowngroup { get; set; }
        public virtual DbSet<mifs_issues> mifs_issues { get; set; }
    
        public virtual int Sproc_CoreSetAppMenuUser(Nullable<int> menuId, Nullable<int> userId, Nullable<bool> canadd, Nullable<bool> canedit, Nullable<bool> candelete, Nullable<bool> canview, Nullable<bool> canopen)
        {
            var menuIdParameter = menuId.HasValue ?
                new ObjectParameter("menuId", menuId) :
                new ObjectParameter("menuId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var canaddParameter = canadd.HasValue ?
                new ObjectParameter("canadd", canadd) :
                new ObjectParameter("canadd", typeof(bool));
    
            var caneditParameter = canedit.HasValue ?
                new ObjectParameter("canedit", canedit) :
                new ObjectParameter("canedit", typeof(bool));
    
            var candeleteParameter = candelete.HasValue ?
                new ObjectParameter("candelete", candelete) :
                new ObjectParameter("candelete", typeof(bool));
    
            var canviewParameter = canview.HasValue ?
                new ObjectParameter("canview", canview) :
                new ObjectParameter("canview", typeof(bool));
    
            var canopenParameter = canopen.HasValue ?
                new ObjectParameter("canopen", canopen) :
                new ObjectParameter("canopen", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sproc_CoreSetAppMenuUser", menuIdParameter, userIdParameter, canaddParameter, caneditParameter, candeleteParameter, canviewParameter, canopenParameter);
        }
    
        public virtual int Sproc_CoreSetAppSystem(Nullable<int> sysId, string syscode, string sysname, string sysdescription, Nullable<bool> isactive, string about, Nullable<bool> showwebapps, Nullable<bool> showusermenu, Nullable<bool> ismaintenance)
        {
            var sysIdParameter = sysId.HasValue ?
                new ObjectParameter("sysId", sysId) :
                new ObjectParameter("sysId", typeof(int));
    
            var syscodeParameter = syscode != null ?
                new ObjectParameter("syscode", syscode) :
                new ObjectParameter("syscode", typeof(string));
    
            var sysnameParameter = sysname != null ?
                new ObjectParameter("sysname", sysname) :
                new ObjectParameter("sysname", typeof(string));
    
            var sysdescriptionParameter = sysdescription != null ?
                new ObjectParameter("sysdescription", sysdescription) :
                new ObjectParameter("sysdescription", typeof(string));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var aboutParameter = about != null ?
                new ObjectParameter("about", about) :
                new ObjectParameter("about", typeof(string));
    
            var showwebappsParameter = showwebapps.HasValue ?
                new ObjectParameter("showwebapps", showwebapps) :
                new ObjectParameter("showwebapps", typeof(bool));
    
            var showusermenuParameter = showusermenu.HasValue ?
                new ObjectParameter("showusermenu", showusermenu) :
                new ObjectParameter("showusermenu", typeof(bool));
    
            var ismaintenanceParameter = ismaintenance.HasValue ?
                new ObjectParameter("ismaintenance", ismaintenance) :
                new ObjectParameter("ismaintenance", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sproc_CoreSetAppSystem", sysIdParameter, syscodeParameter, sysnameParameter, sysdescriptionParameter, isactiveParameter, aboutParameter, showwebappsParameter, showusermenuParameter, ismaintenanceParameter);
        }
    
        public virtual int Sproc_CoreSetAppSystemUser(Nullable<int> sysId, Nullable<int> userId, string createdby)
        {
            var sysIdParameter = sysId.HasValue ?
                new ObjectParameter("sysId", sysId) :
                new ObjectParameter("sysId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sproc_CoreSetAppSystemUser", sysIdParameter, userIdParameter, createdbyParameter);
        }
    
        public virtual int Sproc_FPMADailyTaskFunction(Nullable<int> id, string employeeId, Nullable<int> taskTodayID, string task, Nullable<System.DateTime> plannedDate, Nullable<System.DateTime> actualStartDate, Nullable<System.DateTime> accomplishedDate, Nullable<int> projectId, Nullable<int> activityId, string status, string remarks, Nullable<System.DateTime> plannedDateEnd, string site, string createdby, string source, Nullable<byte> isImpediment, Nullable<int> action)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            var taskTodayIDParameter = taskTodayID.HasValue ?
                new ObjectParameter("TaskTodayID", taskTodayID) :
                new ObjectParameter("TaskTodayID", typeof(int));
    
            var taskParameter = task != null ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(string));
    
            var plannedDateParameter = plannedDate.HasValue ?
                new ObjectParameter("PlannedDate", plannedDate) :
                new ObjectParameter("PlannedDate", typeof(System.DateTime));
    
            var actualStartDateParameter = actualStartDate.HasValue ?
                new ObjectParameter("ActualStartDate", actualStartDate) :
                new ObjectParameter("ActualStartDate", typeof(System.DateTime));
    
            var accomplishedDateParameter = accomplishedDate.HasValue ?
                new ObjectParameter("AccomplishedDate", accomplishedDate) :
                new ObjectParameter("AccomplishedDate", typeof(System.DateTime));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var activityIdParameter = activityId.HasValue ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var plannedDateEndParameter = plannedDateEnd.HasValue ?
                new ObjectParameter("PlannedDateEnd", plannedDateEnd) :
                new ObjectParameter("PlannedDateEnd", typeof(System.DateTime));
    
            var siteParameter = site != null ?
                new ObjectParameter("site", site) :
                new ObjectParameter("site", typeof(string));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("source", source) :
                new ObjectParameter("source", typeof(string));
    
            var isImpedimentParameter = isImpediment.HasValue ?
                new ObjectParameter("isImpediment", isImpediment) :
                new ObjectParameter("isImpediment", typeof(byte));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sproc_FPMADailyTaskFunction", idParameter, employeeIdParameter, taskTodayIDParameter, taskParameter, plannedDateParameter, actualStartDateParameter, accomplishedDateParameter, projectIdParameter, activityIdParameter, statusParameter, remarksParameter, plannedDateEndParameter, siteParameter, createdbyParameter, sourceParameter, isImpedimentParameter, actionParameter);
        }
    
        public virtual ObjectResult<Sproc_mifsClosureChart_Result> Sproc_mifsClosureChart(string useremail, Nullable<int> param)
        {
            var useremailParameter = useremail != null ?
                new ObjectParameter("useremail", useremail) :
                new ObjectParameter("useremail", typeof(string));
    
            var paramParameter = param.HasValue ?
                new ObjectParameter("param", param) :
                new ObjectParameter("param", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sproc_mifsClosureChart_Result>("Sproc_mifsClosureChart", useremailParameter, paramParameter);
        }
    
        public virtual int Sproc_mifsGetCommitment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sproc_mifsGetCommitment");
        }
    
        public virtual ObjectResult<Sproc_mifsGetMemberSeparated_Result> Sproc_mifsGetMemberSeparated(Nullable<int> itype)
        {
            var itypeParameter = itype.HasValue ?
                new ObjectParameter("itype", itype) :
                new ObjectParameter("itype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sproc_mifsGetMemberSeparated_Result>("Sproc_mifsGetMemberSeparated", itypeParameter);
        }
    
        public virtual ObjectResult<Sproc_mifsIssuesCategoryGraph_Result> Sproc_mifsIssuesCategoryGraph(string useremail)
        {
            var useremailParameter = useremail != null ?
                new ObjectParameter("useremail", useremail) :
                new ObjectParameter("useremail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sproc_mifsIssuesCategoryGraph_Result>("Sproc_mifsIssuesCategoryGraph", useremailParameter);
        }
    
        public virtual int Sproc_mifsLadderize()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sproc_mifsLadderize");
        }
    
        public virtual int Sproc_mifsRemapEmail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sproc_mifsRemapEmail");
        }
    
        public virtual int Sproc_mifsResumeParking()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sproc_mifsResumeParking");
        }
    
        public virtual ObjectResult<Sproc_mifsSelectAttendees_Result> Sproc_mifsSelectAttendees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sproc_mifsSelectAttendees_Result>("Sproc_mifsSelectAttendees");
        }
    
        public virtual ObjectResult<Nullable<decimal>> Sproc_mifsSetAttendance(Nullable<int> attendanceId, Nullable<int> meetingId, string attendeeempid, string attendeename, string attendeemail, string attendeephone, Nullable<byte> ismember, Nullable<byte> ispresent, string created_by, Nullable<System.DateTime> create_date)
        {
            var attendanceIdParameter = attendanceId.HasValue ?
                new ObjectParameter("attendanceId", attendanceId) :
                new ObjectParameter("attendanceId", typeof(int));
    
            var meetingIdParameter = meetingId.HasValue ?
                new ObjectParameter("meetingId", meetingId) :
                new ObjectParameter("meetingId", typeof(int));
    
            var attendeeempidParameter = attendeeempid != null ?
                new ObjectParameter("attendeeempid", attendeeempid) :
                new ObjectParameter("attendeeempid", typeof(string));
    
            var attendeenameParameter = attendeename != null ?
                new ObjectParameter("attendeename", attendeename) :
                new ObjectParameter("attendeename", typeof(string));
    
            var attendeemailParameter = attendeemail != null ?
                new ObjectParameter("attendeemail", attendeemail) :
                new ObjectParameter("attendeemail", typeof(string));
    
            var attendeephoneParameter = attendeephone != null ?
                new ObjectParameter("attendeephone", attendeephone) :
                new ObjectParameter("attendeephone", typeof(string));
    
            var ismemberParameter = ismember.HasValue ?
                new ObjectParameter("ismember", ismember) :
                new ObjectParameter("ismember", typeof(byte));
    
            var ispresentParameter = ispresent.HasValue ?
                new ObjectParameter("ispresent", ispresent) :
                new ObjectParameter("ispresent", typeof(byte));
    
            var created_byParameter = created_by != null ?
                new ObjectParameter("created_by", created_by) :
                new ObjectParameter("created_by", typeof(string));
    
            var create_dateParameter = create_date.HasValue ?
                new ObjectParameter("create_date", create_date) :
                new ObjectParameter("create_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Sproc_mifsSetAttendance", attendanceIdParameter, meetingIdParameter, attendeeempidParameter, attendeenameParameter, attendeemailParameter, attendeephoneParameter, ismemberParameter, ispresentParameter, created_byParameter, create_dateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Sproc_mifsSetMeeting(Nullable<int> meetingId, string hashcode, Nullable<int> topicId, string agenda, Nullable<System.DateTime> datestart, Nullable<System.DateTime> dateend, string venue, string facilitator, string created_by, Nullable<System.DateTime> create_date, string status, Nullable<System.DateTime> scheduledatestart, Nullable<System.DateTime> scheduledateend)
        {
            var meetingIdParameter = meetingId.HasValue ?
                new ObjectParameter("meetingId", meetingId) :
                new ObjectParameter("meetingId", typeof(int));
    
            var hashcodeParameter = hashcode != null ?
                new ObjectParameter("hashcode", hashcode) :
                new ObjectParameter("hashcode", typeof(string));
    
            var topicIdParameter = topicId.HasValue ?
                new ObjectParameter("topicId", topicId) :
                new ObjectParameter("topicId", typeof(int));
    
            var agendaParameter = agenda != null ?
                new ObjectParameter("agenda", agenda) :
                new ObjectParameter("agenda", typeof(string));
    
            var datestartParameter = datestart.HasValue ?
                new ObjectParameter("datestart", datestart) :
                new ObjectParameter("datestart", typeof(System.DateTime));
    
            var dateendParameter = dateend.HasValue ?
                new ObjectParameter("dateend", dateend) :
                new ObjectParameter("dateend", typeof(System.DateTime));
    
            var venueParameter = venue != null ?
                new ObjectParameter("venue", venue) :
                new ObjectParameter("venue", typeof(string));
    
            var facilitatorParameter = facilitator != null ?
                new ObjectParameter("facilitator", facilitator) :
                new ObjectParameter("facilitator", typeof(string));
    
            var created_byParameter = created_by != null ?
                new ObjectParameter("created_by", created_by) :
                new ObjectParameter("created_by", typeof(string));
    
            var create_dateParameter = create_date.HasValue ?
                new ObjectParameter("create_date", create_date) :
                new ObjectParameter("create_date", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var scheduledatestartParameter = scheduledatestart.HasValue ?
                new ObjectParameter("scheduledatestart", scheduledatestart) :
                new ObjectParameter("scheduledatestart", typeof(System.DateTime));
    
            var scheduledateendParameter = scheduledateend.HasValue ?
                new ObjectParameter("scheduledateend", scheduledateend) :
                new ObjectParameter("scheduledateend", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Sproc_mifsSetMeeting", meetingIdParameter, hashcodeParameter, topicIdParameter, agendaParameter, datestartParameter, dateendParameter, venueParameter, facilitatorParameter, created_byParameter, create_dateParameter, statusParameter, scheduledatestartParameter, scheduledateendParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Sproc_mifsSetMembers(string memberId, string fullname, string emailaddress, string mobileno, string created_by, Nullable<System.DateTime> create_date, string nickname, string status)
        {
            var memberIdParameter = memberId != null ?
                new ObjectParameter("memberId", memberId) :
                new ObjectParameter("memberId", typeof(string));
    
            var fullnameParameter = fullname != null ?
                new ObjectParameter("fullname", fullname) :
                new ObjectParameter("fullname", typeof(string));
    
            var emailaddressParameter = emailaddress != null ?
                new ObjectParameter("emailaddress", emailaddress) :
                new ObjectParameter("emailaddress", typeof(string));
    
            var mobilenoParameter = mobileno != null ?
                new ObjectParameter("mobileno", mobileno) :
                new ObjectParameter("mobileno", typeof(string));
    
            var created_byParameter = created_by != null ?
                new ObjectParameter("created_by", created_by) :
                new ObjectParameter("created_by", typeof(string));
    
            var create_dateParameter = create_date.HasValue ?
                new ObjectParameter("create_date", create_date) :
                new ObjectParameter("create_date", typeof(System.DateTime));
    
            var nicknameParameter = nickname != null ?
                new ObjectParameter("nickname", nickname) :
                new ObjectParameter("nickname", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Sproc_mifsSetMembers", memberIdParameter, fullnameParameter, emailaddressParameter, mobilenoParameter, created_byParameter, create_dateParameter, nicknameParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Sproc_mifsSetResponse(Nullable<int> responseId, Nullable<int> issueId, string messagedetails, string responseby, string responsebyempid, Nullable<System.DateTime> responsedate, string responsebyemail)
        {
            var responseIdParameter = responseId.HasValue ?
                new ObjectParameter("responseId", responseId) :
                new ObjectParameter("responseId", typeof(int));
    
            var issueIdParameter = issueId.HasValue ?
                new ObjectParameter("issueId", issueId) :
                new ObjectParameter("issueId", typeof(int));
    
            var messagedetailsParameter = messagedetails != null ?
                new ObjectParameter("messagedetails", messagedetails) :
                new ObjectParameter("messagedetails", typeof(string));
    
            var responsebyParameter = responseby != null ?
                new ObjectParameter("responseby", responseby) :
                new ObjectParameter("responseby", typeof(string));
    
            var responsebyempidParameter = responsebyempid != null ?
                new ObjectParameter("responsebyempid", responsebyempid) :
                new ObjectParameter("responsebyempid", typeof(string));
    
            var responsedateParameter = responsedate.HasValue ?
                new ObjectParameter("responsedate", responsedate) :
                new ObjectParameter("responsedate", typeof(System.DateTime));
    
            var responsebyemailParameter = responsebyemail != null ?
                new ObjectParameter("responsebyemail", responsebyemail) :
                new ObjectParameter("responsebyemail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Sproc_mifsSetResponse", responseIdParameter, issueIdParameter, messagedetailsParameter, responsebyParameter, responsebyempidParameter, responsedateParameter, responsebyemailParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Sproc_mifsSetTopic(Nullable<int> topicId, string hashcode, string aliascode, string description, string status, Nullable<int> topiclevel, Nullable<int> fupfrequency, string created_by, Nullable<System.DateTime> create_date)
        {
            var topicIdParameter = topicId.HasValue ?
                new ObjectParameter("topicId", topicId) :
                new ObjectParameter("topicId", typeof(int));
    
            var hashcodeParameter = hashcode != null ?
                new ObjectParameter("hashcode", hashcode) :
                new ObjectParameter("hashcode", typeof(string));
    
            var aliascodeParameter = aliascode != null ?
                new ObjectParameter("aliascode", aliascode) :
                new ObjectParameter("aliascode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var topiclevelParameter = topiclevel.HasValue ?
                new ObjectParameter("topiclevel", topiclevel) :
                new ObjectParameter("topiclevel", typeof(int));
    
            var fupfrequencyParameter = fupfrequency.HasValue ?
                new ObjectParameter("fupfrequency", fupfrequency) :
                new ObjectParameter("fupfrequency", typeof(int));
    
            var created_byParameter = created_by != null ?
                new ObjectParameter("created_by", created_by) :
                new ObjectParameter("created_by", typeof(string));
    
            var create_dateParameter = create_date.HasValue ?
                new ObjectParameter("create_date", create_date) :
                new ObjectParameter("create_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Sproc_mifsSetTopic", topicIdParameter, hashcodeParameter, aliascodeParameter, descriptionParameter, statusParameter, topiclevelParameter, fupfrequencyParameter, created_byParameter, create_dateParameter);
        }
    
        public virtual ObjectResult<string> Sproc_mifsTransferIssue(string transferfrom, string transferto)
        {
            var transferfromParameter = transferfrom != null ?
                new ObjectParameter("transferfrom", transferfrom) :
                new ObjectParameter("transferfrom", typeof(string));
    
            var transfertoParameter = transferto != null ?
                new ObjectParameter("transferto", transferto) :
                new ObjectParameter("transferto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sproc_mifsTransferIssue", transferfromParameter, transfertoParameter);
        }
    
        public virtual int Sproc_SendSms(string phonenum, string smsmessage, string smssource, string smssender)
        {
            var phonenumParameter = phonenum != null ?
                new ObjectParameter("phonenum", phonenum) :
                new ObjectParameter("phonenum", typeof(string));
    
            var smsmessageParameter = smsmessage != null ?
                new ObjectParameter("smsmessage", smsmessage) :
                new ObjectParameter("smsmessage", typeof(string));
    
            var smssourceParameter = smssource != null ?
                new ObjectParameter("smssource", smssource) :
                new ObjectParameter("smssource", typeof(string));
    
            var smssenderParameter = smssender != null ?
                new ObjectParameter("smssender", smssender) :
                new ObjectParameter("smssender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sproc_SendSms", phonenumParameter, smsmessageParameter, smssourceParameter, smssenderParameter);
        }
    
        public virtual int Sproc_SyncEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sproc_SyncEmployee");
        }
    
        public virtual ObjectResult<Nullable<decimal>> Sproc_mifsSetIssues(Nullable<int> issueId, string hashcode, Nullable<int> topicId, string issuedetails, string actionplan, Nullable<System.DateTime> issuedate, Nullable<int> fromtopicId, Nullable<System.DateTime> targetcompletiondate, string raisedby, string raisedbyemail, string raisedbyempid, string raisedbyphone, string responsible, string responemail, string responempid, string responphone, Nullable<int> followfrequency, Nullable<byte> followmail, Nullable<byte> followsms, string status, string newstatus, Nullable<byte> acknowledgedbysource, Nullable<System.DateTime> acknowledgesourcedate, Nullable<byte> acknowledgebyrespondent, Nullable<System.DateTime> acknowledgerespondentdate, Nullable<int> fupcounter, Nullable<System.DateTime> parkdate, Nullable<System.DateTime> resumedate, Nullable<System.DateTime> lastsenddate, Nullable<int> statchangefupcounter, Nullable<int> meetingId, string reference, string sourcetype, string created_by, Nullable<System.DateTime> create_date, string collaboratorname, string collaboratoremail, Nullable<byte> pflag, Nullable<byte> issuetype, string issuecategory, string branchcode, string districtcode, string quadrant, Nullable<int> fromissueid, string subkpi, Nullable<int> reviewlevel)
        {
            var issueIdParameter = issueId.HasValue ?
                new ObjectParameter("issueId", issueId) :
                new ObjectParameter("issueId", typeof(int));
    
            var hashcodeParameter = hashcode != null ?
                new ObjectParameter("hashcode", hashcode) :
                new ObjectParameter("hashcode", typeof(string));
    
            var topicIdParameter = topicId.HasValue ?
                new ObjectParameter("topicId", topicId) :
                new ObjectParameter("topicId", typeof(int));
    
            var issuedetailsParameter = issuedetails != null ?
                new ObjectParameter("issuedetails", issuedetails) :
                new ObjectParameter("issuedetails", typeof(string));
    
            var actionplanParameter = actionplan != null ?
                new ObjectParameter("actionplan", actionplan) :
                new ObjectParameter("actionplan", typeof(string));
    
            var issuedateParameter = issuedate.HasValue ?
                new ObjectParameter("issuedate", issuedate) :
                new ObjectParameter("issuedate", typeof(System.DateTime));
    
            var fromtopicIdParameter = fromtopicId.HasValue ?
                new ObjectParameter("fromtopicId", fromtopicId) :
                new ObjectParameter("fromtopicId", typeof(int));
    
            var targetcompletiondateParameter = targetcompletiondate.HasValue ?
                new ObjectParameter("targetcompletiondate", targetcompletiondate) :
                new ObjectParameter("targetcompletiondate", typeof(System.DateTime));
    
            var raisedbyParameter = raisedby != null ?
                new ObjectParameter("raisedby", raisedby) :
                new ObjectParameter("raisedby", typeof(string));
    
            var raisedbyemailParameter = raisedbyemail != null ?
                new ObjectParameter("raisedbyemail", raisedbyemail) :
                new ObjectParameter("raisedbyemail", typeof(string));
    
            var raisedbyempidParameter = raisedbyempid != null ?
                new ObjectParameter("raisedbyempid", raisedbyempid) :
                new ObjectParameter("raisedbyempid", typeof(string));
    
            var raisedbyphoneParameter = raisedbyphone != null ?
                new ObjectParameter("raisedbyphone", raisedbyphone) :
                new ObjectParameter("raisedbyphone", typeof(string));
    
            var responsibleParameter = responsible != null ?
                new ObjectParameter("responsible", responsible) :
                new ObjectParameter("responsible", typeof(string));
    
            var responemailParameter = responemail != null ?
                new ObjectParameter("responemail", responemail) :
                new ObjectParameter("responemail", typeof(string));
    
            var responempidParameter = responempid != null ?
                new ObjectParameter("responempid", responempid) :
                new ObjectParameter("responempid", typeof(string));
    
            var responphoneParameter = responphone != null ?
                new ObjectParameter("responphone", responphone) :
                new ObjectParameter("responphone", typeof(string));
    
            var followfrequencyParameter = followfrequency.HasValue ?
                new ObjectParameter("followfrequency", followfrequency) :
                new ObjectParameter("followfrequency", typeof(int));
    
            var followmailParameter = followmail.HasValue ?
                new ObjectParameter("followmail", followmail) :
                new ObjectParameter("followmail", typeof(byte));
    
            var followsmsParameter = followsms.HasValue ?
                new ObjectParameter("followsms", followsms) :
                new ObjectParameter("followsms", typeof(byte));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var newstatusParameter = newstatus != null ?
                new ObjectParameter("newstatus", newstatus) :
                new ObjectParameter("newstatus", typeof(string));
    
            var acknowledgedbysourceParameter = acknowledgedbysource.HasValue ?
                new ObjectParameter("acknowledgedbysource", acknowledgedbysource) :
                new ObjectParameter("acknowledgedbysource", typeof(byte));
    
            var acknowledgesourcedateParameter = acknowledgesourcedate.HasValue ?
                new ObjectParameter("acknowledgesourcedate", acknowledgesourcedate) :
                new ObjectParameter("acknowledgesourcedate", typeof(System.DateTime));
    
            var acknowledgebyrespondentParameter = acknowledgebyrespondent.HasValue ?
                new ObjectParameter("acknowledgebyrespondent", acknowledgebyrespondent) :
                new ObjectParameter("acknowledgebyrespondent", typeof(byte));
    
            var acknowledgerespondentdateParameter = acknowledgerespondentdate.HasValue ?
                new ObjectParameter("acknowledgerespondentdate", acknowledgerespondentdate) :
                new ObjectParameter("acknowledgerespondentdate", typeof(System.DateTime));
    
            var fupcounterParameter = fupcounter.HasValue ?
                new ObjectParameter("fupcounter", fupcounter) :
                new ObjectParameter("fupcounter", typeof(int));
    
            var parkdateParameter = parkdate.HasValue ?
                new ObjectParameter("parkdate", parkdate) :
                new ObjectParameter("parkdate", typeof(System.DateTime));
    
            var resumedateParameter = resumedate.HasValue ?
                new ObjectParameter("resumedate", resumedate) :
                new ObjectParameter("resumedate", typeof(System.DateTime));
    
            var lastsenddateParameter = lastsenddate.HasValue ?
                new ObjectParameter("lastsenddate", lastsenddate) :
                new ObjectParameter("lastsenddate", typeof(System.DateTime));
    
            var statchangefupcounterParameter = statchangefupcounter.HasValue ?
                new ObjectParameter("statchangefupcounter", statchangefupcounter) :
                new ObjectParameter("statchangefupcounter", typeof(int));
    
            var meetingIdParameter = meetingId.HasValue ?
                new ObjectParameter("meetingId", meetingId) :
                new ObjectParameter("meetingId", typeof(int));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("reference", reference) :
                new ObjectParameter("reference", typeof(string));
    
            var sourcetypeParameter = sourcetype != null ?
                new ObjectParameter("sourcetype", sourcetype) :
                new ObjectParameter("sourcetype", typeof(string));
    
            var created_byParameter = created_by != null ?
                new ObjectParameter("created_by", created_by) :
                new ObjectParameter("created_by", typeof(string));
    
            var create_dateParameter = create_date.HasValue ?
                new ObjectParameter("create_date", create_date) :
                new ObjectParameter("create_date", typeof(System.DateTime));
    
            var collaboratornameParameter = collaboratorname != null ?
                new ObjectParameter("collaboratorname", collaboratorname) :
                new ObjectParameter("collaboratorname", typeof(string));
    
            var collaboratoremailParameter = collaboratoremail != null ?
                new ObjectParameter("collaboratoremail", collaboratoremail) :
                new ObjectParameter("collaboratoremail", typeof(string));
    
            var pflagParameter = pflag.HasValue ?
                new ObjectParameter("pflag", pflag) :
                new ObjectParameter("pflag", typeof(byte));
    
            var issuetypeParameter = issuetype.HasValue ?
                new ObjectParameter("issuetype", issuetype) :
                new ObjectParameter("issuetype", typeof(byte));
    
            var issuecategoryParameter = issuecategory != null ?
                new ObjectParameter("issuecategory", issuecategory) :
                new ObjectParameter("issuecategory", typeof(string));
    
            var branchcodeParameter = branchcode != null ?
                new ObjectParameter("branchcode", branchcode) :
                new ObjectParameter("branchcode", typeof(string));
    
            var districtcodeParameter = districtcode != null ?
                new ObjectParameter("districtcode", districtcode) :
                new ObjectParameter("districtcode", typeof(string));
    
            var quadrantParameter = quadrant != null ?
                new ObjectParameter("quadrant", quadrant) :
                new ObjectParameter("quadrant", typeof(string));
    
            var fromissueidParameter = fromissueid.HasValue ?
                new ObjectParameter("fromissueid", fromissueid) :
                new ObjectParameter("fromissueid", typeof(int));
    
            var subkpiParameter = subkpi != null ?
                new ObjectParameter("subkpi", subkpi) :
                new ObjectParameter("subkpi", typeof(string));
    
            var reviewlevelParameter = reviewlevel.HasValue ?
                new ObjectParameter("reviewlevel", reviewlevel) :
                new ObjectParameter("reviewlevel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Sproc_mifsSetIssues", issueIdParameter, hashcodeParameter, topicIdParameter, issuedetailsParameter, actionplanParameter, issuedateParameter, fromtopicIdParameter, targetcompletiondateParameter, raisedbyParameter, raisedbyemailParameter, raisedbyempidParameter, raisedbyphoneParameter, responsibleParameter, responemailParameter, responempidParameter, responphoneParameter, followfrequencyParameter, followmailParameter, followsmsParameter, statusParameter, newstatusParameter, acknowledgedbysourceParameter, acknowledgesourcedateParameter, acknowledgebyrespondentParameter, acknowledgerespondentdateParameter, fupcounterParameter, parkdateParameter, resumedateParameter, lastsenddateParameter, statchangefupcounterParameter, meetingIdParameter, referenceParameter, sourcetypeParameter, created_byParameter, create_dateParameter, collaboratornameParameter, collaboratoremailParameter, pflagParameter, issuetypeParameter, issuecategoryParameter, branchcodeParameter, districtcodeParameter, quadrantParameter, fromissueidParameter, subkpiParameter, reviewlevelParameter);
        }
    }
}
